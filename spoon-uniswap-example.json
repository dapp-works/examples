{
	"id": "ccb4828a-4da3-4048-acf7-90d8ce84e9f1-example",
	"version": "0.1.0",
	"name": "spoon-uniswap-example",
	"contractsTemplateManager": {
		"contracts": [
			{
				"id": "abdb9c8a-a865-4990-b603-0ffa1f921dcd",
				"name": "UniSwapRouter",
				"abi": [
					{
						"type": "constructor",
						"inputs": [
							{
								"name": "_factory",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "_WETH",
								"type": "address",
								"internalType": "address"
							}
						],
						"stateMutability": "nonpayable"
					},
					{
						"name": "WETH",
						"type": "function",
						"inputs": [],
						"outputs": [
							{
								"name": "",
								"type": "address",
								"internalType": "address"
							}
						],
						"stateMutability": "view"
					},
					{
						"name": "addLiquidity",
						"type": "function",
						"inputs": [
							{
								"name": "tokenA",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "tokenB",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "amountADesired",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountBDesired",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountAMin",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountBMin",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "to",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "deadline",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [
							{
								"name": "amountA",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountB",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "liquidity",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"stateMutability": "nonpayable"
					},
					{
						"name": "addLiquidityETH",
						"type": "function",
						"inputs": [
							{
								"name": "token",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "amountTokenDesired",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountTokenMin",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountETHMin",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "to",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "deadline",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [
							{
								"name": "amountToken",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountETH",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "liquidity",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"stateMutability": "payable"
					},
					{
						"name": "factory",
						"type": "function",
						"inputs": [],
						"outputs": [
							{
								"name": "",
								"type": "address",
								"internalType": "address"
							}
						],
						"stateMutability": "view"
					},
					{
						"name": "getAmountIn",
						"type": "function",
						"inputs": [
							{
								"name": "amountOut",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "reserveIn",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "reserveOut",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [
							{
								"name": "amountIn",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"stateMutability": "pure"
					},
					{
						"name": "getAmountOut",
						"type": "function",
						"inputs": [
							{
								"name": "amountIn",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "reserveIn",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "reserveOut",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [
							{
								"name": "amountOut",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"stateMutability": "pure"
					},
					{
						"name": "getAmountsIn",
						"type": "function",
						"inputs": [
							{
								"name": "amountOut",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "path",
								"type": "address[]",
								"internalType": "address[]"
							}
						],
						"outputs": [
							{
								"name": "amounts",
								"type": "uint256[]",
								"internalType": "uint256[]"
							}
						],
						"stateMutability": "view"
					},
					{
						"name": "getAmountsOut",
						"type": "function",
						"inputs": [
							{
								"name": "amountIn",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "path",
								"type": "address[]",
								"internalType": "address[]"
							}
						],
						"outputs": [
							{
								"name": "amounts",
								"type": "uint256[]",
								"internalType": "uint256[]"
							}
						],
						"stateMutability": "view"
					},
					{
						"name": "quote",
						"type": "function",
						"inputs": [
							{
								"name": "amountA",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "reserveA",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "reserveB",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [
							{
								"name": "amountB",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"stateMutability": "pure"
					},
					{
						"name": "removeLiquidity",
						"type": "function",
						"inputs": [
							{
								"name": "tokenA",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "tokenB",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "liquidity",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountAMin",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountBMin",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "to",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "deadline",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [
							{
								"name": "amountA",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountB",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"stateMutability": "nonpayable"
					},
					{
						"name": "removeLiquidityETH",
						"type": "function",
						"inputs": [
							{
								"name": "token",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "liquidity",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountTokenMin",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountETHMin",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "to",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "deadline",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [
							{
								"name": "amountToken",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountETH",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"stateMutability": "nonpayable"
					},
					{
						"name": "removeLiquidityETHSupportingFeeOnTransferTokens",
						"type": "function",
						"inputs": [
							{
								"name": "token",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "liquidity",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountTokenMin",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountETHMin",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "to",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "deadline",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [
							{
								"name": "amountETH",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"stateMutability": "nonpayable"
					},
					{
						"name": "swapETHForExactTokens",
						"type": "function",
						"inputs": [
							{
								"name": "amountOut",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "path",
								"type": "address[]",
								"internalType": "address[]"
							},
							{
								"name": "to",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "deadline",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [
							{
								"name": "amounts",
								"type": "uint256[]",
								"internalType": "uint256[]"
							}
						],
						"stateMutability": "payable"
					},
					{
						"name": "swapExactETHForTokens",
						"type": "function",
						"inputs": [
							{
								"name": "amountOutMin",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "path",
								"type": "address[]",
								"internalType": "address[]"
							},
							{
								"name": "to",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "deadline",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [
							{
								"name": "amounts",
								"type": "uint256[]",
								"internalType": "uint256[]"
							}
						],
						"stateMutability": "payable"
					},
					{
						"name": "swapExactETHForTokensSupportingFeeOnTransferTokens",
						"type": "function",
						"inputs": [
							{
								"name": "amountOutMin",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "path",
								"type": "address[]",
								"internalType": "address[]"
							},
							{
								"name": "to",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "deadline",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [],
						"stateMutability": "payable"
					},
					{
						"name": "swapExactTokensForETH",
						"type": "function",
						"inputs": [
							{
								"name": "amountIn",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountOutMin",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "path",
								"type": "address[]",
								"internalType": "address[]"
							},
							{
								"name": "to",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "deadline",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [
							{
								"name": "amounts",
								"type": "uint256[]",
								"internalType": "uint256[]"
							}
						],
						"stateMutability": "nonpayable"
					},
					{
						"name": "swapExactTokensForETHSupportingFeeOnTransferTokens",
						"type": "function",
						"inputs": [
							{
								"name": "amountIn",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountOutMin",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "path",
								"type": "address[]",
								"internalType": "address[]"
							},
							{
								"name": "to",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "deadline",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [],
						"stateMutability": "nonpayable"
					},
					{
						"name": "swapExactTokensForTokens",
						"type": "function",
						"inputs": [
							{
								"name": "amountIn",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountOutMin",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "path",
								"type": "address[]",
								"internalType": "address[]"
							},
							{
								"name": "to",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "deadline",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [
							{
								"name": "amounts",
								"type": "uint256[]",
								"internalType": "uint256[]"
							}
						],
						"stateMutability": "nonpayable"
					},
					{
						"name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
						"type": "function",
						"inputs": [
							{
								"name": "amountIn",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountOutMin",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "path",
								"type": "address[]",
								"internalType": "address[]"
							},
							{
								"name": "to",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "deadline",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [],
						"stateMutability": "nonpayable"
					},
					{
						"name": "swapTokensForExactETH",
						"type": "function",
						"inputs": [
							{
								"name": "amountOut",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountInMax",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "path",
								"type": "address[]",
								"internalType": "address[]"
							},
							{
								"name": "to",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "deadline",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [
							{
								"name": "amounts",
								"type": "uint256[]",
								"internalType": "uint256[]"
							}
						],
						"stateMutability": "nonpayable"
					},
					{
						"name": "swapTokensForExactTokens",
						"type": "function",
						"inputs": [
							{
								"name": "amountOut",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "amountInMax",
								"type": "uint256",
								"internalType": "uint256"
							},
							{
								"name": "path",
								"type": "address[]",
								"internalType": "address[]"
							},
							{
								"name": "to",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "deadline",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [
							{
								"name": "amounts",
								"type": "uint256[]",
								"internalType": "uint256[]"
							}
						],
						"stateMutability": "nonpayable"
					},
					{
						"type": "receive",
						"stateMutability": "payable"
					}
				],
				"bytecode": "",
				"isOpen": true,
				"viewSize": "md"
			},
			{
				"id": "f3d47bce-f3fc-4fad-92cb-3a608b319844",
				"name": "ERC20",
				"abi": [
					{
						"type": "constructor",
						"inputs": [
							{
								"name": "treasury",
								"type": "address",
								"internalType": "address"
							}
						],
						"stateMutability": "nonpayable"
					},
					{
						"name": "Approval",
						"type": "event",
						"inputs": [
							{
								"name": "owner",
								"type": "address",
								"indexed": true,
								"internalType": "address"
							},
							{
								"name": "spender",
								"type": "address",
								"indexed": true,
								"internalType": "address"
							},
							{
								"name": "value",
								"type": "uint256",
								"indexed": false,
								"internalType": "uint256"
							}
						],
						"anonymous": false
					},
					{
						"name": "Transfer",
						"type": "event",
						"inputs": [
							{
								"name": "from",
								"type": "address",
								"indexed": true,
								"internalType": "address"
							},
							{
								"name": "to",
								"type": "address",
								"indexed": true,
								"internalType": "address"
							},
							{
								"name": "value",
								"type": "uint256",
								"indexed": false,
								"internalType": "uint256"
							}
						],
						"anonymous": false
					},
					{
						"name": "allowance",
						"type": "function",
						"inputs": [
							{
								"name": "owner",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "spender",
								"type": "address",
								"internalType": "address"
							}
						],
						"outputs": [
							{
								"name": "",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"stateMutability": "view"
					},
					{
						"name": "approve",
						"type": "function",
						"inputs": [
							{
								"name": "spender",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "amount",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [
							{
								"name": "",
								"type": "bool",
								"internalType": "bool"
							}
						],
						"stateMutability": "nonpayable"
					},
					{
						"name": "balanceOf",
						"type": "function",
						"inputs": [
							{
								"name": "account",
								"type": "address",
								"internalType": "address"
							}
						],
						"outputs": [
							{
								"name": "",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"stateMutability": "view"
					},
					{
						"name": "decimals",
						"type": "function",
						"inputs": [],
						"outputs": [
							{
								"name": "",
								"type": "uint8",
								"internalType": "uint8"
							}
						],
						"stateMutability": "view"
					},
					{
						"name": "decreaseAllowance",
						"type": "function",
						"inputs": [
							{
								"name": "spender",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "subtractedValue",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [
							{
								"name": "",
								"type": "bool",
								"internalType": "bool"
							}
						],
						"stateMutability": "nonpayable"
					},
					{
						"name": "increaseAllowance",
						"type": "function",
						"inputs": [
							{
								"name": "spender",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "addedValue",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [
							{
								"name": "",
								"type": "bool",
								"internalType": "bool"
							}
						],
						"stateMutability": "nonpayable"
					},
					{
						"name": "name",
						"type": "function",
						"inputs": [],
						"outputs": [
							{
								"name": "",
								"type": "string",
								"internalType": "string"
							}
						],
						"stateMutability": "view"
					},
					{
						"name": "symbol",
						"type": "function",
						"inputs": [],
						"outputs": [
							{
								"name": "",
								"type": "string",
								"internalType": "string"
							}
						],
						"stateMutability": "view"
					},
					{
						"name": "totalSupply",
						"type": "function",
						"inputs": [],
						"outputs": [
							{
								"name": "",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"stateMutability": "view"
					},
					{
						"name": "transfer",
						"type": "function",
						"inputs": [
							{
								"name": "to",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "amount",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [
							{
								"name": "",
								"type": "bool",
								"internalType": "bool"
							}
						],
						"stateMutability": "nonpayable"
					},
					{
						"name": "transferFrom",
						"type": "function",
						"inputs": [
							{
								"name": "from",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "to",
								"type": "address",
								"internalType": "address"
							},
							{
								"name": "amount",
								"type": "uint256",
								"internalType": "uint256"
							}
						],
						"outputs": [
							{
								"name": "",
								"type": "bool",
								"internalType": "bool"
							}
						],
						"stateMutability": "nonpayable"
					}
				],
				"bytecode": "",
				"isOpen": true,
				"viewSize": "sm"
			}
		]
	},
	"routesTemplateManager": {
		"routes": []
	},
	"docsTemplateManager": {
		"docs": [
			{
				"id": "12509e87-a9ed-4e4a-82cd-45a24fb9f959",
				"name": "README.md",
				"content": {
					"text": "## UniSwap dApp\nThis is an example of Spoon's dApp project, which includes the contract for the Uniswap Router. The user interface is generated using Spoon's online code functionality. Developers can write Dapps using React, and the basic usage example is included\n\n## Authors\n- [@dapp-works](https://github.com/dapp-works/examples)\n",
					"html": "<h2>UniSwap dApp</h2>\n<p>This is an example of Spoon's dApp project, which includes the contract for the Uniswap Router. The user interface is generated using Spoon's online code functionality. Developers can write Dapps using React, and the basic usage example is included</p>\n<h2>Authors</h2>\n<ul>\n<li><a href=\"https://github.com/dapp-works/examples\">@dapp-works</a></li>\n</ul>\n"
				},
				"isOpen": true,
				"viewSize": "sm"
			}
		]
	},
	"scriptsTemplateManager": {
		"scripts": [
			{
				"id": "71b26187-fc69-4e96-a561-70233b5dc8ee",
				"name": "Uniswap ETH",
				"code": "import Uniswap from \"./Uniswap\"\nimport {Link} from '@chakra-ui/react'\n\nconst head = <Link href=\"https://app.uniswap.org/\" isExternal fontSize=\"xs\" color=\"purple\">Detail: https://app.uniswap.org/</Link>\n\nexport default () => <Uniswap chainId={1} head={head} />",
				"isOpen": true,
				"isRouter": true,
<<<<<<< HEAD
				"viewSize": "sm",
				"type": {
					"name": "script"
				}
=======
				"viewSize": "sm"
>>>>>>> c6ed099de280d574c5f892f44584e67a26116a64
			},
			{
				"id": "e4681493-f67b-44e3-979d-b065a60302cf",
				"name": "Uniswap ETF",
				"code": "import Uniswap from \"./Uniswap\"\nimport { Link, Box } from '@chakra-ui/react'\n\nconst head = <Box>\n    <b>Uniswap (Spooned) on EthereumFair.  </b> <br />\n    Please refer to the Community Forum for detailed instructions:\n    <Link href=\"https://community.spoon.limo/\" isExternal color=\"purple\">https://community.spoon.limo/</Link> <br />\n    The original app url:\n    <Link href=\"https://app.uniswap.org/\" isExternal color=\"purple\">https://app.uniswap.org/</Link>\n</Box>\n\nexport default () => <Uniswap chainId={513100} head={head} />",
				"isOpen": true,
				"isRouter": true,
<<<<<<< HEAD
				"viewSize": "sm",
				"type": {
					"name": "script"
				}
=======
				"viewSize": "sm"
>>>>>>> c6ed099de280d574c5f892f44584e67a26116a64
			},
			{
				"id": "b1035755-ee9c-49bd-8bc8-c296437d8732",
				"name": "Uniswap ETHW",
				"code": "import Uniswap from \"./Uniswap\"\nimport { Link, Box } from '@chakra-ui/react'\n\nconst head = <Box>\n    <b>Uniswap (Spooned) on ETHW.  </b> <br />\n    Please refer to the Community Forum for detailed instructions:\n    <Link href=\"https://community.spoon.limo/\" isExternal color=\"purple\">https://community.spoon.limo/</Link> <br />\n    The original app url:\n    <Link href=\"https://app.uniswap.org/\" isExternal color=\"purple\">https://app.uniswap.org/</Link>\n</Box>\n\nexport default () => <Uniswap chainId={10001} head={head} />",
				"isOpen": true,
				"isRouter": true,
<<<<<<< HEAD
				"viewSize": "sm",
				"type": {
					"name": "script"
				}
=======
				"viewSize": "sm"
>>>>>>> c6ed099de280d574c5f892f44584e67a26116a64
			},
			{
				"id": "ee23dd0a-2ffb-4032-913b-d403f9849a98",
				"name": "Uniswap",
<<<<<<< HEAD
				"code": "import { observer, useLocalObservable, } from 'mobx-react-lite'\nimport {\n    Box, Button, Input, Flex, Image, Text, Center, InputGroup, InputRightElement\n    , HStack\n} from '@chakra-ui/react'\nimport { makeAutoObservable } from 'mobx';\nimport { ChevronDownIcon, ArrowDownIcon, QuestionOutlineIcon } from '@chakra-ui/icons'\nimport { useEffect } from 'react'\nimport { BigNumberInputState, BigNumberState, BigNumber } from 'standard'\nimport sdk from 'spoon'\nconst { getToken, event, god, token } = sdk\nconst account = sdk.god.currentNetwork.account\n\nexport default function Uniswap({ children, head, chainId = 1 }) {\n    const store = useLocalObservable(() => ({\n        swapLoading: false,\n        swapSide: \"from\", // from to \n        searchAddress: '',\n        slippage: 0.1,\n        fromToken: null,\n        toToken: null,\n        fromAmount: new BigNumberInputState({ decimals: 18 }),\n        toAmount: new BigNumberInputState({ decimals: 18 }),\n        connectWallet() {\n            sdk.god.setShowConnecter(true)\n        },\n        get SwapState() {\n            if (!UniSwapRouter.chainIds.includes(chainId)) {\n                return {\n                    valid: true,\n                    msg: 'Switch Chain',\n                    onClick: async () => {\n                        sdk.helper.setChain(sdk.god, chainId)\n                    }\n                }\n            }\n\n            if (!!!this.toToken || this.fromAmount.isZero || this.toAmount.isZero) {\n                return {\n                    valid: false,\n                    msg: 'Swap',\n                    onClick: async () => {\n                        sdk.helper.setChain(sdk.god, chainId)\n                    }\n                }\n            }\n\n            if (this.fromToken.isEther && this.toToken.isWrapped || this.toToken.isEther && this.fromToken.isWrapped) {\n                return {\n                    valid: false,\n                    msg: 'Comming Soon...',\n                }\n            }\n\n            if (!this.fromToken.isEther && this.fromToken?.allowance == '0') {\n                return {\n                    valid: true,\n                    msg: `Approve ${this.fromToken.name}`,\n                    onClick: async () => {\n                        this.swapLoading = true\n                        await sdk.smartgraph.mutation({\n                            contractName: 'ERC20',\n                            method: 'approve',\n                            params: [UniSwapRouter.address, ethers.constants.MaxUint256.toString()],\n                            address: this.fromToken.address,\n                            value: null,\n                            chainId\n                        }).then((res) => {\n                            this.swapLoading = false\n                            this.fromToken.allowance = ethers.constants.MaxUint256.toString()\n                        }).catch(err => { this.swapLoading = false });\n                    }\n                }\n            }\n\n            return {\n                valid: true,\n                msg: 'Swap',\n                onClick: async () => {\n                    this.swapLoading = true\n                    try {\n                        if (this.fromToken.isEther) {\n                            await UniSwapRouter.swapETHForExactTokens({\n                                amountOut: this.toAmount.value.toFixed(0),\n                                path: this.bestPath,\n                                to: account,\n                                deadline: this.deadline,\n                                value: this.fromAmount.value.toFixed(0)\n                            })\n                        }\n                        if (this.toToken.isEther) {\n                            await UniSwapRouter.swapExactTokensForETH({\n                                amountIn: this.fromAmount.value.toFixed(0),\n                                amountOutMin: this.toAmount.value.times(1 - this.slippage).toFixed(0),\n                                path: this.bestPath,\n                                to: account,\n                                deadline: this.deadline\n                            })\n                        }\n                        if (!this.toToken.isEther && !this.fromToken.isEther) {\n                            await UniSwapRouter.swapTokensForExactTokens({\n                                amountIn: this.fromAmount.value.toFixed(0),\n                                amountOutMin: this.toAmount.value.times(1 - this.slippage).toFixed(0),\n                                path: this.bestPath,\n                                to: account,\n                                deadline: this.deadline\n                            })\n                        }\n                        sdk.helper.toast({ status: 'success', description: 'Swap Success' })\n                        this.reset()\n                    } catch (err) {\n                        console.log(err)\n                        this.swapLoading = false\n                    }\n                }\n            }\n        },\n        get isSupportChain() {\n            return sdk.god.currentChain.chainId == chainId\n        },\n        get deadline() {\n            return String(Math.floor(new Date().getTime() / 1000) + Number(20) * 60);\n        },\n        get bestPath() {\n            let path\n            if (this.fromToken.isEther) {\n                path = [token.wrappedToken.address, this.toToken.address]\n            }\n            if (this.toToken.isEther) {\n                path = [this.fromToken.address, token.wrappedToken.address]\n            }\n            if (!this.fromToken.isEther && !this.toToken.isEther) {\n                path = [this.fromToken.address, this.toToken.address]\n            }\n            return path\n        },\n        get blackList() {\n            return [this.fromToken.address, this.toToken?.address]\n        },\n        switchChain() {\n            sdk.helper.setChain(sdk.god, chainId)\n        },\n        reset() {\n            this.swapLoading = false\n            this.fromAmount.setFormat('')\n            this.toAmount.setFormat('')\n            setTimeout(() => { this.updateBalance() }, 3000)\n        },\n        onSwapTokenSide() {\n            if (!!!this.toToken) return\n            [this.fromToken, this.toToken] = [this.toToken, this.fromToken];\n            [this.fromAmount, this.toAmount] = [this.toAmount, this.fromAmount];\n            this.swapSide == 'to' ? this.swapSide = 'from' : this.swapSide = 'to'\n            this.updatePrice();\n        },\n        onSelectToken(token) {\n            console.log(token)\n            if (this.swapSide == 'to') {\n                this.toToken = token\n            } else {\n                this.fromToken = token\n            }\n            this.updatePrice()\n        },\n        onChangeFromAmount(value) {\n            this.fromAmount.setDecimals(this.fromToken.decimals)\n            typeof value == 'string' ? this.fromAmount.setFormat(value) : this.fromAmount.setValue(value)\n            this.swapSide = 'from'\n            if (value == '') {\n                return this.toAmount.setFormat('')\n            }\n            _.throttle(() => {\n                this.updatePrice();\n            }, 500)();\n        },\n        onChangeToAmount(value) {\n            console.log(this.toToken.decimals)\n            this.toAmount.setDecimals(this.toToken.decimals)\n            this.swapSide = 'to'\n            typeof value == 'string' ? this.toAmount.setFormat(value) : this.toAmount.setValue(value);\n            this.toAmount.setFormat(value)\n            if (value == '') {\n                return this.fromAmount.setFormat('')\n            }\n            _.throttle(() => {\n                this.updatePrice();\n            }, 500)();\n        },\n        //calc swap amount\n        async updatePrice() {\n            if (!!!this.toToken) return\n            if (this.fromToken.isEther && this.toToken.isWrapped || this.toToken.isEther && this.fromToken.isWrapped) return (this.toAmount = this.fromAmount)\n            store.swapLoading = true\n            try {\n                if (this.swapSide == 'from') {\n                    console.log('getAmountsOut', this.fromAmount.decimals)\n                    let res = await UniSwapRouter.getAmountsOut(\n                        { amountIn: this.fromAmount.value.toFixed(0), path: this.bestPath })\n                    console.log(res)\n                    store.swapLoading = false\n                    this.toAmount.setDecimals(this.toToken.decimals);\n                    this.toAmount.setValue(new BigNumber(res.data.UniSwapRouter[0].getAmountsOut.split(',')[1]));\n                } else {\n                    console.log('getAmountsIn', 'toAmountDecimas:', this.toToken.decimals, 'fromDecima', this.fromToken.decimals)\n                    let res = await UniSwapRouter.getAmountsIn({ amountOut: this.toAmount.value.toFixed(0), path: this.bestPath })\n                    console.log(res)\n                    store.swapLoading = false\n                    this.fromAmount.setDecimals(this.fromToken.decimals);\n                    this.fromAmount.setValue(new BigNumber(res.data.UniSwapRouter[0].getAmountsIn.split(',')[0]));\n                }\n\n            } catch (err) {\n                store.swapLoading = false\n            }\n        },\n        async updateBalance() {\n            if (!!!this.fromToken) this.fromToken = token.etherToken\n            const loadEther = async (type) => {\n                await god.currentNetwork.loadBalance();\n                type == 'from' ? this.fromToken.balance.setValue(sdk.god?.currentChain?.Coin?.balance.value) : this.toToken.balance.setValue(sdk.god?.currentChain?.Coin?.balance.value)\n            }\n            const loadToken = async (address, type) => {\n                let res = await UniSwapRouter.balanceOf(address)\n                type == 'from' ? this.fromToken.balance.setValue(new BigNumber(res.data.ERC20[0].balanceOf)) : this.toToken.balance.setValue(new BigNumber(res.data.ERC20[0].balanceOf))\n            }\n            this.fromToken?.isEther ? loadEther('from') : loadToken(this.fromToken.address, 'from')\n            if (!!!this.toToken) return\n            this.toToken?.isEther ? loadEther('to') : loadToken(this.toToken.address, 'to')\n        },\n        async onSelectToken(side) {\n            store.swapSide = side\n            const token = await getToken({ swapContractAddrs: UniSwapRouter.UniSwapRouterAddress, blackList: store.blackList })\n            store.swapSide == 'from' ? this.fromToken = token : this.toToken = token;\n        }\n    }))\n\n    useEffect(() => {\n        store.updateBalance()\n        const timer = setInterval(() => {\n            store.updateBalance()\n        }, 3000)\n        return () => clearInterval(timer)\n    }, [])\n    // event.onLoadedBalance(() => {\n    //     store.fromToken.balance = sdk.god?.currentChain?.Coin?.balance\n    // })\n\n    const App = observer(() => {\n        if (!currentNetwork.account) {\n            return <Button onClick={store.connectWallet}>Connect Wallet</Button>\n        }\n\n        return <Box bg=\"white\" w=\"500px\" p=\"2rem\" rounded=\"xl\" boxShadow='0px 3px 20px #d6d6d680'>\n            {head && head}\n            <Flex mt={4} direction=\"column\">\n                <Flex>\n                    <HStack py='1' onClick={() => {\n                        store.onSelectToken('from')\n                    }} _hover={{ background: 'gray.200', cursor: \"pointer\", borderRadius: '10px' }} px='2'>\n                        <Text ml=\"2\" fontSize=\"xs\">FROM:</Text>\n                        <Image ml=\"2\" w='5' h='5' src={store.fromToken?.logoURI} fallback={<QuestionOutlineIcon />} />\n                        <Text ml=\"1\" fontSize=\"xs\">{store.fromToken?.symbol || 'Select a currency'}</Text>\n                        <ChevronDownIcon />\n                    </HStack>\n\n                    <Text fontSize=\"xs\" ml=\"auto\">{store.fromToken?.balance?.format}</Text>\n                </Flex>\n                <InputGroup>\n                    <Input value={store.fromAmount.format} mt={2} bg=\"white\" placeholder='0.0' onChange={(event) => {\n                        store.onChangeFromAmount(event.currentTarget.value);\n                    }} />\n                    <InputRightElement onClick={() => {\n                        store.onChangeFromAmount(store.fromToken?.balance?.value);\n                    }} mt={2} mr={2} children={<Button colorScheme='purple' size=\"xs\" >Max</Button>} />\n                </InputGroup>\n            </Flex>\n\n            <Center mt={5}>\n                <Box onClick={() => {\n                    store.onSwapTokenSide()\n                }} rounded=\"full\" bg=\"#f3f0ff\" p={2} cursor=\"pointer\">\n                    <svg style={{ height: \"14px\" }} viewBox=\"0 0 24 24\" focusable=\"false\"><path d=\"M6.75 23.75V2M6.75 23.75L1 18M6.75 23.75L12 18.5\" stroke=\"#805ad5\" stroke-width=\"2\"></path><path d=\"M18 2V23.75M18 2L23.75 7.75M18 2L12.25 7.75\" stroke=\"#805ad5\" stroke-width=\"2\"></path></svg>\n                </Box>\n            </Center>\n\n            <Flex direction=\"column\" mt={3}>\n                <Flex>\n                    <HStack py='1' onClick={() => {\n                        store.onSelectToken('to')\n                    }} _hover={{ background: 'gray.200', cursor: \"pointer\", borderRadius: '10px' }} px='2'>\n                        <Text ml=\"2\" fontSize=\"xs\">TO:</Text>\n                        <Image ml=\"2\" w='5' h='5' src={store.toToken?.logoURI} fallback={<QuestionOutlineIcon />} />\n                        <Text ml=\"1\" fontSize=\"xs\">{store.toToken?.symbol || 'Select a currency'}</Text>\n                    </HStack>\n                    <Text fontSize=\"xs\" ml=\"auto\">{store.toToken?.balance?.format}</Text>\n                </Flex>\n\n                <InputGroup>\n                    <Input value={store.toAmount.format} mt={2} bg=\"white\"\n                        placeholder='0.0'\n                        onChange={(event) => {\n                            store.onChangeToAmount(event.currentTarget.value);\n                        }} />\n                    {\n                        store.toToken && <InputRightElement onClick={() => {\n                            store.onChangeToAmount(store.toToken?.balance?.format);\n                        }} mt={2} mr={2} children={<Button colorScheme='purple' size=\"xs\" >Max</Button>} />\n                    }\n                </InputGroup>\n\n            </Flex>\n\n\n            <Center mt={5}>\n                <Button disabled={!store.SwapState.valid} isLoading={store.swapLoading} w='full' colorScheme='purple' onClick={() => store.SwapState.onClick()}>{store.SwapState.msg}</Button>\n            </Center>\n        </Box>\n    })\n\n    return <Center>\n\n        <App />\n    </Center>\n}\n\n\nclass UniSwapRouterClass {\n    UniSwapRouterAddress = {\n        1: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n        513100: \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\",\n        10001: \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\",\n        4689: \"0x147CdAe2BF7e809b9789aD0765899c06B361C5cE\"\n    }\n\n    get chainIds() {\n        return Object.keys(this.UniSwapRouterAddress).map(i => Number(i))\n    }\n\n    get chainId() {\n        return sdk.god.currentChain.chainId\n    }\n\n    get address() {\n        return this.UniSwapRouterAddress[sdk.god.currentChain.chainId]\n    }\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    swapExactTokensForETH({ amountIn, amountOutMin, path, to, deadline }) {\n        return sdk.smartgraph.mutation({\n            contractName: 'UniSwapRouter',\n            method: 'swapExactTokensForETH',\n            params: [amountIn, amountOutMin, path, to, deadline],\n            address: this.address,\n            value: null,\n            chainId: this.chainId\n        })\n    }\n\n    swapETHForExactTokens({ amountOut, path, to, deadline, value }) {\n        return sdk.smartgraph.mutation({\n            contractName: 'UniSwapRouter',\n            method: 'swapETHForExactTokens',\n            params: [amountOut, path, to, deadline],\n            address: this.address,\n            value: value,\n            chainId: this.chainId\n        })\n    }\n\n    swapTokensForExactTokens({ amountIn, amountOutMin, path, to, deadline }) {\n        return sdk.smartgraph.mutation({\n            contractName: 'UniSwapRouter',\n            method: 'swapExactTokensForTokens',\n            params: [amountIn, amountOutMin, path, to, deadline],\n            address: this.address,\n            value: null,\n            chainId: this.chainId\n        })\n    }\n\n    getAmountsOut({ amountIn, path }) {\n        return sdk.smartgraph.query({\n            UniSwapRouter: {\n                __args: {\n                    calls: { chainId: this.chainId, address: this.address }\n                },\n                getAmountsOut: {\n                    __args: { amountIn, path }\n                }\n            }\n        })\n    }\n\n    getAmountsIn({ amountOut, path }) {\n        return sdk.smartgraph.query({\n            UniSwapRouter: {\n                __args: {\n                    calls: { chainId: this.chainId, address: this.address }\n                },\n                getAmountsIn: {\n                    __args: { amountOut, path }\n                }\n            }\n        })\n    }\n\n    balanceOf(address) {\n        return sdk.smartgraph.query({\n            ERC20: {\n                __args: {\n                    calls: { chainId: this.chainId, address }\n                },\n                balanceOf: {\n                    __args: { account }\n                }\n            }\n        });\n    }\n\n}\nconst UniSwapRouter = new UniSwapRouterClass()",
=======
				"code": "import { observer, useLocalObservable } from 'mobx-react-lite'\nimport {\n    Box, Button, Input, Flex, Image, Text, Center, Link, Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    HStack,\n    Stack,\n    useDisclosure\n} from '@chakra-ui/react'\n\nimport { ChevronDownIcon, ArrowDownIcon, QuestionOutlineIcon } from '@chakra-ui/icons'\nimport { useEffect } from 'react'\nimport { BigNumberInputState, BigNumberState, BigNumber } from 'standard'\nimport sdk from 'spoon'\n\nexport default function Uniswap({ children, head, chainId = 1}) {\n    const uniswapAddress = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\n    const WTokenAddress = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'\n    const { isOpen, onOpen, onClose } = useDisclosure()\n    const store = useLocalObservable(() => ({\n        swapLoading: false,\n        searchAddrModel: \"from\", // from to \n        searchAddress: '',\n        slippage: 0.1,\n        curSerachToken: {\n            isEther: false,\n            address: \"\",\n            decimals: 18,\n            name: '',\n            logoURL: ''\n        },\n        basicTokens: [],\n        fromToken: {\n            isEther: false,\n            address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n            balance: new BigNumberState({ decimals: 18 }),\n            allowance: '0',\n            decimals: 18,\n            name: \"DAI\",\n            logoURL: \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x6B175474E89094C44Da98b954EedeAC495271d0F/logo.png\"\n        },\n        toToken: {\n            //WETH ADDRESS\n            isEther: true,\n            address: WTokenAddress,\n            balance: new BigNumberState({ decimals: 18 }),\n            decimals: 18,\n            name: \"ETH\",\n            logoURL: \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\"\n        },\n        switchChain() {\n            sdk.helper.setChain(sdk.god, chainId)\n        },\n        fromAmount: new BigNumberInputState({}),\n        toAmount: new BigNumberInputState({ decimals: 18 }),\n        connectWallet() {\n            sdk.god.setShowConnecter(true)\n        },\n        get SwapState() {\n            // disabled={store.fromAmount.isZero || sdk.god.currentChain.Coin?.balance.format == '0'}\n            if (sdk.god.currentChain.chainId != chainId) {\n                return {\n                    valid: true,\n                    msg: 'Switch Chain',\n                    onClick: async () => {\n                        sdk.helper.setChain(sdk.god, chainId)\n                    }\n                }\n            }\n\n            if (this.fromToken.allowance == '0') {\n                return {\n                    valid: true,\n                    msg: `Approve ${this.fromToken.name}`,\n                    onClick: async () => {\n                        this.swapLoading = true\n                        await sdk.smartgraph.mutation({\n                            contractName: 'ERC20',\n                            method: 'approve',\n                            params: [uniswapAddress, ethers.constants.MaxUint256.toString()],\n                            address: this.fromToken.address,\n                            value: null,\n                            chainId\n                        }).then((res) => {\n                            this.swapLoading = false\n                            this.fromToken.allowance = ethers.constants.MaxUint256.toString()\n                        }).catch(err => { this.swapLoading = false });\n                    }\n                }\n            }\n\n            return {\n                valid: true,\n                msg: 'Swap',\n                onClick: () => {\n                    this.swapLoading = true\n                    try {\n                        sdk.smartgraph.mutation({\n                            contractName: 'UniSwapRouter',\n                            method: 'swapExactTokensForETH',\n                            params: [this.fromAmount.value.toFixed(0), this.toAmount.value.times(1 - this.slippage).toFixed(0), [this.fromToken.address, WTokenAddress,], sdk.god.currentNetwork.account, this.deadline],\n                            address: uniswapAddress,\n                            value: null,\n                            chainId\n                        }).then((res) => {\n                            console.log(res);\n                            this.swapLoading = false\n                            sdk.helper.toast({ status: 'success', description: 'Swap Success' })\n                            this.init()\n                            this.fromAmount.setFormat('')\n                            this.toAmount.setFormat('')\n                        });\n                    } catch {\n                        this.swapLoading = false\n                    }\n                }\n            }\n        },\n        get isSupportChain() {\n            return sdk.god.currentChain.chainId == chainId\n        },\n        get deadline() {\n            return String(Math.floor(new Date().getTime() / 1000) + Number(20) * 60);\n        },\n        onChangeFromAmount(value) {\n            this.fromAmount.setFormat(value)\n            if (value == '') {\n                return this.toAmount.setFormat('')\n            }\n            _.throttle(() => {\n                this.updatePrice();\n            }, 500)();\n        },\n        onChangeToAmount(value) {\n            console.log(value, this.toToken.decimals)\n            this.toAmount.setDecimals(this.toToken.decimals);\n            this.toAmount.setFormat(value)\n        },\n        //calc swap amount\n        async updatePrice() {\n            store.swapLoading = true\n            console.log(`path:[\"${this.fromToken.address}\",\"${WTokenAddress}\"]`)\n            sdk.smartgraph.query(`query {\n          UniSwapRouter (calls: {chainId: ${chainId}, address: \"${uniswapAddress}\"}) {\n              getAmountsOut (amountIn: \"${this.fromAmount.value.toFixed(0)}\", path:[\"${this.fromToken.address}\",\"${WTokenAddress}\"])\n          }\n      }`).then((res) => {\n                store.swapLoading = false\n                console.log(res.data.UniSwapRouter[0]);\n                try {\n                    this.toAmount.setDecimals(this.toToken.decimals);\n                    this.toAmount.setValue(new BigNumber(res.data.UniSwapRouter[0].getAmountsOut.split(',')[1]));\n                } catch { }\n            }).catch(err => {\n                store.swapLoading = false\n            });\n        },\n\n        init() {\n            try {\n                sdk.smartgraph.query(`query {\n                ERC20 (calls: {chainId: ${chainId}, address: \"${store.fromToken.address}\"}) {\n                        balanceOf (account: \"${sdk.god.currentNetwork.account}\")\n                        allowance(owner:\"${sdk.god.currentNetwork.account}\",spender:\"${uniswapAddress}\")\n                    }\n                }`).then((res) => {\n                    console.log(res)\n                    store.fromToken.balance.setValue(new BigNumber(res.data.ERC20[0].balanceOf))\n                    store.fromToken.allowance = res.data.ERC20[0].allowance\n                    sdk.god.currentNetwork.loadBalance();\n                });\n\n                sdk.smartgraph.query(`query {\n                ERC20 (calls: [{chainId: ${chainId}, address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\"},{chainId: ${chainId}, address: \"0xdac17f958d2ee523a2206206994597c13d831ec7\"},{chainId: ${chainId}, address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\"}]) {\n                        address\n                        name\n                        symbol\n                        decimals\n                        balanceOf (account: \"${sdk.god.currentNetwork.account}\")\n                        allowance(owner:\"${sdk.god.currentNetwork.account}\",spender:\"${uniswapAddress}\")\n                    }\n                }`).then((res) => {\n                    console.log('res', res)\n                    store.basicTokens = [];\n                    res.data.ERC20.forEach(i => {\n                        store.basicTokens.push({\n                            address: i.address,\n                            name: i.symbol,\n                            decimals: Number(i.decimals),\n                            balance: new BigNumberState({\n                                value: new BigNumber(i.balanceOf),\n                                decimals: Number(i.decimals),\n                            }),\n                            allowance: i.allowance,\n                            logoURL: `//logo.chainbit.xyz/${i.symbol.toLowerCase()}`\n                        })\n                    })\n                    console.log('res', store.basicTokens)\n                });\n            } catch (err) {\n            }\n        },\n        onSearchAddress() {\n            sdk.smartgraph.query(`query {\n            ERC20 (calls: {chainId: ${chainId}, address: \"${store.searchAddress}\"}) {\n                  balanceOf (account: \"${sdk.god.currentNetwork.account}\")\n                  name\n                  symbol\n                  decimals\n                  allowance(owner:\"${sdk.god.currentNetwork.account}\",spender:\"${uniswapAddress}\")\n              }\n          }`).then((res) => {\n                console.log(res);\n                store.curSerachToken = {\n                    address: store.searchAddress,\n                    name: res.data.ERC20[0].symbol,\n                    decimals: Number(res.data.ERC20[0].decimals),\n                    balance: new BigNumberState({\n                        value: new BigNumber(res.data.ERC20[0].balanceOf),\n                        decimals: Number(res.data.ERC20[0].decimals),\n                    }),\n                    allowance: res.data.ERC20[0].allowance,\n                    logoURL: `//logo.chainbit.xyz/${res.data.ERC20[0].symbol.toLowerCase()}`\n                }\n                console.log(store.curSerachToken.name)\n            });\n        }\n    }))\n\n    useEffect(() => {\n        store.init()\n        // sdk.smartgraph.event.on('provider.newBlock',store.init);\n    }, [])\n\n    useEffect(() => {\n        console.log(chainId)\n    }, [sdk.god.currentChain.chainId])\n\n    const SerachAddressModal = observer(() => {\n        return (\n            <>\n                <Modal isOpen={isOpen} onClose={onClose}>\n                    <ModalOverlay />\n                    <ModalContent>\n                        <ModalHeader>Import Token From Address</ModalHeader>\n                        <ModalCloseButton />\n                        <ModalBody>\n                            <Box>\n                                <Input placeholder='Address:0X' onChange={e => {\n                                    store.searchAddress = e.target.value\n                                    store.onSearchAddress()\n                                }} />\n                                {\n                                    store.curSerachToken.name && <Flex onClick={() => {\n                                        if (store.searchAddrModel == 'from') {\n                                            store.fromToken = store.curSerachToken;\n                                            store.fromAmount.setDecimals(store.curSerachToken.decimals);\n                                            onClose();\n                                            store.updatePrice();\n                                        }\n                                    }} mt='2' p='2' background='gray.200' cursor='pointer' borderRadius='8px' _hover={{ background: 'gray.300' }}>\n                                        <Image ml=\"2\" w='5' h='5' src={store.curSerachToken?.logoURL} fallback={<QuestionOutlineIcon />} />\n                                        <Text ml='2'>{store.curSerachToken.name}</Text>\n                                        <Text ml=\"auto\">{store.curSerachToken.balance?.format}</Text>\n                                    </Flex>\n                                }\n                                {\n                                    store.basicTokens?.map(i => {\n                                        return <Flex onClick={() => {\n                                            if (store.searchAddrModel == 'from') {\n                                                store.fromToken = i;\n                                                store.fromAmount.setDecimals(i.decimals);\n                                                onClose();\n                                                store.updatePrice();\n                                            }\n                                        }} mt='2' p='2' background='gray.200' cursor='pointer' borderRadius='8px' _hover={{ background: 'gray.300' }}>\n                                            <Image ml=\"2\" w='5' h='5' src={i.logoURL} fallback={<QuestionOutlineIcon />} />\n                                            <Text ml='2'>{i.name}</Text>\n                                            <Text ml=\"auto\">{i.balance?.format}</Text>\n                                        </Flex>\n                                    })\n                                }\n                            </Box>\n                        </ModalBody>\n\n                        <ModalFooter>\n                            <Button mr={3} onClick={onClose}>\n                                Close\n                            </Button>\n                        </ModalFooter>\n                    </ModalContent>\n                </Modal>\n            </>\n        )\n    })\n\n    const App = observer(() => {\n        if (!currentNetwork.account) {\n            return <Button onClick={store.connectWallet}>Connect Wallet</Button>\n        }\n\n        return <Box bg=\"white\" w=\"500px\" p=\"2rem\" rounded=\"xl\" boxShadow='0px 3px 20px #d6d6d680'>\n            {head && head}\n            <Flex mt={4} direction=\"column\">\n                <Flex>\n                    <HStack onClick={() => {\n                        onOpen();\n                        store.searchAddrModel = 'from'\n                    }} _hover={{ background: 'gray.200', cursor: \"pointer\", borderRadius: '10px' }} px='2'>\n                        <Text ml=\"2\" fontSize=\"xs\">FROM:</Text>\n                        <Image ml=\"2\" w='5' h='5' src={store.fromToken.logoURL} fallback={<QuestionOutlineIcon />} />\n                        <Text ml=\"1\" fontSize=\"xs\">{store.fromToken.name}</Text>\n                        <ChevronDownIcon />\n                    </HStack>\n\n                    <Text fontSize=\"xs\" ml=\"auto\">{store.fromToken.balance?.format}</Text>\n                </Flex>\n                <Input value={store.fromAmount.format} mt={2} bg=\"white\" placeholder='0.0' onChange={(event) => {\n                    store.onChangeFromAmount(event.currentTarget.value);\n                }} />\n            </Flex>\n\n            <Center mt={5}>\n                <Box rounded=\"full\" bg=\"#f3f0ff\" p={1}>\n                    <ArrowDownIcon />\n                </Box>\n            </Center>\n\n            <Flex direction=\"column\" mt={3}>\n                <Flex>\n                    <HStack px='2'>\n                        <Text ml=\"2\" fontSize=\"xs\">TO:</Text>\n                        <Image ml=\"2\" w='5' h='5' src={store.toToken.logoURL} fallback={<QuestionOutlineIcon />} />\n                        <Text ml=\"1\" fontSize=\"xs\">{store.toToken.name}</Text>\n\n                    </HStack>\n                    <Text fontSize=\"xs\" ml=\"auto\">{store.isSupportChain ? sdk.god.currentChain.Coin?.balance.format : '...'}</Text>\n                </Flex>\n                <Input value={store.toAmount.format} mt={2} bg=\"white\" placeholder='0.0' onChange={(event) => {\n                    store.onChangeToAmount(event.currentTarget.value);\n                }} />\n            </Flex>\n\n            <Center mt={5}>\n\n                <Button disabled={!store.SwapState.valid} isLoading={store.swapLoading} w='full' colorScheme='purple' onClick={() => store.SwapState.onClick()}>{store.SwapState.msg}</Button>\n            </Center>\n\n            <SerachAddressModal />\n        </Box>\n    })\n    return <Center> <App /> </Center>\n}\n\n\n",
>>>>>>> c6ed099de280d574c5f892f44584e67a26116a64
				"isOpen": true,
				"isRouter": false,
				"viewSize": "sm",
				"type": {
					"name": "script"
				}
			},
			{
				"id": "3cb8883f-45ef-47ac-ad29-ffc2c0346e94",
				"name": "UniSwapRouter",
				"code": "// doc:\nimport sdk from 'spoon'\nimport { makeAutoObservable } from 'mobx';\nconst { token: { wrappedToken } } = sdk\nconst account = sdk.god.currentNetwork.account\nclass UniSwapRouter {\n  UniSwapRouterAddress = {\n    1: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n    513100: \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\",\n    10001: \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\",\n    4689: \"0x147CdAe2BF7e809b9789aD0765899c06B361C5cE\"\n  }\n\n  get chainIds() {\n    return Object.keys(this.UniSwapRouterAddress).map(i => Number(i))\n  }\n\n  get chainId() {\n    return sdk.god.currentChain.chainId\n  }\n\n  get address() {\n    return this.UniSwapRouterAddress[sdk.god.currentChain.chainId]\n  }\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  swapExactTokensForETH({ amountIn, amountOutMin, path, to, deadline }) {\n    return sdk.smartgraph.mutation({\n      contractName: 'UniSwapRouter',\n      method: 'swapExactTokensForETH',\n      params: [amountIn, amountOutMin, path, to, deadline],\n      address: this.address,\n      value: null,\n      chainId: this.chainId\n    })\n  }\n\n  swapETHForExactTokens({ amountOut, path, to, deadline, value }) {\n    return sdk.smartgraph.mutation({\n      contractName: 'UniSwapRouter',\n      method: 'swapETHForExactTokens',\n      params: [amountOut, path, to, deadline],\n      address: this.address,\n      value: value,\n      chainId: this.chainId\n    })\n  }\n\n  swapTokensForExactTokens({ amountIn, amountOutMin, path, to, deadline }) {\n    return sdk.smartgraph.mutation({\n      contractName: 'UniSwapRouter',\n      method: 'swapExactTokensForTokens',\n      params: [amountIn, amountOutMin, path, to, deadline],\n      address: this.address,\n      value: null,\n      chainId: this.chainId\n    })\n  }\n\n  getAmountsOut({ amountIn, path }) {\n    return sdk.smartgraph.query({\n      UniSwapRouter: {\n        __args: {\n          calls: { chainId: this.chainId, address: this.address }\n        },\n        getAmountsOut: {\n          __args: { amountIn, path }\n        }\n      }\n    })\n  }\n\n  getAmountsIn({ amountOut, path }) {\n    return sdk.smartgraph.query({\n      UniSwapRouter: {\n        __args: {\n          calls: { chainId: this.chainId, address: this.address }\n        },\n        getAmountsIn: {\n          __args: { amountOut, path }\n        }\n      }\n    })\n  }\n\n  balanceOf(address) {\n    return sdk.smartgraph.query({\n      ERC20: {\n        __args: {\n          calls: { chainId: this.chainId, address }\n        },\n        balanceOf: {\n          __args: { account }\n        }\n      }\n    });\n  }\n\n}\n\nexport default new UniSwapRouter()",
				"isOpen": true,
				"isRouter": false,
				"viewSize": "sm",
				"type": {
					"name": "smartgraph-plugin",
					"data": {
						
					}
				}
			}
		]
	},
	"chainData": {
		"1": {
			"contractInstanceManager": {
				"contracts": [
					{
						"id": "7a33ed4e-01a2-4568-a76c-64a580d579ca",
						"templateId": "abdb9c8a-a865-4990-b603-0ffa1f921dcd",
						"address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
						"name": "UniSwapRouter",
						"functionsCache": {
							"WETH": {
								"callResult": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
							},
							"factory": {
								"callResult": "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f"
							},
							"getAmountsOut": {
								"callResult": "100000000000,159793023432691"
							}
						},
						"tabIndex": 0,
						"execHistory": [],
						"show": true
					}
				]
			}
		},
		"4": {
			"contractInstanceManager": {
				"contracts": []
			}
		},
		"4689": {
			"contractInstanceManager": {
				"contracts": []
			}
		},
		"4690": {
			"contractInstanceManager": {
				"contracts": []
			}
		},
		"10001": {
			"contractInstanceManager": {
				"contracts": []
			}
		},
		"513100": {
			"contractInstanceManager": {
				"contracts": []
			}
		}
	},
<<<<<<< HEAD
	"createdAt": 1663745220912,
	"url": "https://raw.githubusercontent.com/spoonproject/examples/main/spoon-uniswap-example.json",
=======
	"createdAt": 1663305978156,
	"url": "https://raw.githubusercontent.com/dapp-works/examples/main/spoon-uniswap-example.json",
>>>>>>> c6ed099de280d574c5f892f44584e67a26116a64
	"homepageUrl": "",
	"logoUrl": "",
	"description": {
		
	}
}
